(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{387:function(t,a,s){"use strict";s.r(a);var n=s(2),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"jvm-方法区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jvm-方法区"}},[t._v("#")]),t._v(" JVM-方法区")]),t._v(" "),a("h2",{attrs:{id:"_1-栈、堆、方法区的交互关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-栈、堆、方法区的交互关系"}},[t._v("#")]),t._v(" 1. 栈、堆、方法区的交互关系")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/20210224183621.png",alt:""}})]),t._v(" "),a("blockquote",[a("p",[t._v("运行时数据区的最后一部分")])]),t._v(" "),a("h3",{attrs:{id:"_1-1-从线程共享与否的角度来看"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-从线程共享与否的角度来看"}},[t._v("#")]),t._v(" 1.1 从线程共享与否的角度来看")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202011/27/133837-29045.png",alt:""}})]),t._v(" "),a("blockquote",[a("p",[t._v("上面为：JDK1.7 （1.8有所不同）")]),t._v(" "),a("p",[t._v("堆，元空间：既有异常（OOM）")])]),t._v(" "),a("h3",{attrs:{id:"_1-2-栈、堆、方法区的交互关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-栈、堆、方法区的交互关系"}},[t._v("#")]),t._v(" 1.2 栈、堆、方法区的交互关系")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/20210224183656.png",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("Person：存放在元空间，也可以说方法区")]),t._v(" "),a("li",[t._v("person：存放在Java栈的局部变量表中")]),t._v(" "),a("li",[t._v("new Person()：存放在Java堆中")])]),t._v(" "),a("h2",{attrs:{id:"_2-方法区的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-方法区的理解"}},[t._v("#")]),t._v(" 2. 方法区的理解")]),t._v(" "),a("p",[t._v("《Java虚拟机规范》中明确说明：“尽管所有的方法区在逻辑上是属于堆的一部分，但一些简单的实现可能不会选择去进行垃圾收集或者进行压缩。”但对于HotSpotJVM而言，方法区还有一个别名叫做Non-Heap（非堆），目的就是要和堆分开。")]),t._v(" "),a("p",[t._v("所以，"),a("code",[t._v("方法区看作是一块独立于Java堆的内存空间")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202012/11/225330-99978.png",alt:""}})]),t._v(" "),a("blockquote",[a("p",[t._v("堆：目的存放“new”的对象 “new Person()“【主要存放的是 实例化的对象】")]),t._v(" "),a("p",[t._v("方法区：存放类的class")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("方法区（Method Area）与Java堆一样，是各个"),a("code",[t._v("线程共享")]),t._v("的内存区域。")])]),t._v(" "),a("li",[a("p",[t._v("方法区在JVM启动的时候被创建，并且它的实际的物理内存空间中和Java堆区一样都可以是"),a("code",[t._v("不连续")]),t._v("的。")])]),t._v(" "),a("li",[a("p",[t._v("方法区的大小，跟堆空间一样，可以选择"),a("code",[t._v("固定大小或者可扩展")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("方法区的大小决定了系统可以保存多少个类，如果系统定义了太多的类，导致方法区溢出，虚拟机同样会抛出内存溢出错误：ava.lang.OutofMemoryError："),a("code",[t._v("PermGen space")]),t._v(" 或者java.lang.OutOfMemoryError:"),a("code",[t._v("Metaspace")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("加载大量的第三方的jar包")])]),t._v(" "),a("li",[a("p",[t._v("Tomcat部署的工程过多（30~50个）")])]),t._v(" "),a("li",[a("p",[t._v("大量动态的生成"),a("code",[t._v("反射类")])])])])]),t._v(" "),a("li",[a("p",[t._v("关闭JVM就会释放这个区域的内存。")])])]),t._v(" "),a("h3",{attrs:{id:"hotspot中方法区的演进"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hotspot中方法区的演进"}},[t._v("#")]),t._v(" HotSpot中方法区的演进")]),t._v(" "),a("ol",[a("li",[t._v("在JDK7及以前，习惯上把方法区，称为永久代。jdk8开始，使用"),a("code",[t._v("元空间")]),t._v("取代了"),a("code",[t._v("永久代")]),t._v("。")]),t._v(" "),a("li",[t._v("本质上，方法区和永久代并不等价。仅是对hotspot而言的。《Java虚拟机规范》对如何实现方法区，不做统一要求。例如：BEA JRockit / IBM J9 中不存在永久代的概念")])]),t._v(" "),a("ul",[a("li",[t._v("现在来看，当年使用永久代，不是好的idea。导致Java程序更容易OOM（超过-XX:MaxPermSize上限）")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[t._v("而到了JDK8,终于完全废弃了永久代概念，改用与JRockit、J9一样在本地内存中实现的元空间（Metaspace）来替代。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/20210224183739.png",alt:""}})])]),t._v(" "),a("li",[a("p",[t._v("元空间的本质和永久代类似，都是JVM规范中方法区的实现。不过元空间与永久代最大的区别在于："),a("code",[t._v("元空间不在虚拟机设置的内存中，而是使用本地内存.")])])]),t._v(" "),a("li",[a("p",[t._v("永久代、元空间二者并不是只是名字变了，内部结果也调整了。")])]),t._v(" "),a("li",[a("p",[t._v("根据《Java虚拟机规范》的规定，如果方法区无法妈祖新的内存分配需求时，将抛出OOM异常。")])])]),t._v(" "),a("h2",{attrs:{id:"_3-设置方法区大小与oom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-设置方法区大小与oom"}},[t._v("#")]),t._v(" 3. 设置方法区大小与OOM")]),t._v(" "),a("p",[t._v("方法区的大小不必是固定的，JVM可以根据应用的需要动态调整。")]),t._v(" "),a("h3",{attrs:{id:"jdk7及以前"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk7及以前"}},[t._v("#")]),t._v(" jdk7及以前")]),t._v(" "),a("ul",[a("li",[t._v("通过-xx:Permsize来设置永久代初始分配空间。默认值是20.75M")]),t._v(" "),a("li",[t._v("-XX:MaxPermsize来设定永久代最大可分配空间。32位机器默认是64M，64位机器模式是82M")]),t._v(" "),a("li",[t._v("当JVM加载的类信息容量超过了这个值，会报异常OutofMemoryError:PermGen space。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202012/12/062925-809422.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"jdk8以后"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk8以后"}},[t._v("#")]),t._v(" JDK8以后")]),t._v(" "),a("ol",[a("li",[t._v("元数据区大小可以使用参数 -XX:MetaspaceSize 和 -XX:MaxMetaspaceSize指定")])]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-XX:MetaspaceSize")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("100m "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-XX:MaxMetaspaceSize")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("100m\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/20210224183855.png",alt:""}})]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("默认值依赖于平台。windows下，-XX:MetaspaceSize是21M，-XX:MaxMetaspaceSize的值是-1，即没有限制。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202012/12/064038-600202.png",alt:""}})]),t._v(" "),a("blockquote",[a("p",[t._v("元空间使用本地内存")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[t._v("与永久代不同，如果不指定大小，默认情况下，虚拟机会耗尽所有的可用系统内存。如果元数据区发生溢出，虚拟机一样会抛出异常OutOfMemoryError:Metaspace")])]),t._v(" "),a("li",[a("p",[t._v("-XX:MetaspaceSize：设置初始的元空间大小。对于一个64位的服务器端JVM来说，其默认的-xx:MetaspaceSize值为21MB。这就是初始的高水位线，一旦触及这个水位线，Ful1GC将会被触发并卸载没用的类（即这些类对应的类加载器不再存活）然后这个高水位线将会重置。新的高水位线的值取决于GC后释放了多少元空间。如果释放的空间不足，那么在不超过MaxMetaspaceSize时，适当提高该值。如果释放空间过多，则适当降低该值。")])]),t._v(" "),a("li",[a("p",[t._v("如果初始化的高水位线设置过低，上述高水位线调整情况会发生很多次。通过垃圾回收器的日志可以观察到Ful1GC多次调用。为了避免频繁地GC，建议将-XX:MetaspaceSize设置为一个相对较高的值。")])])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodAreaDemo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"start..."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"end..."')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("h3",{attrs:{id:"oom-permgen和-oom-metaspace-处理结果oom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oom-permgen和-oom-metaspace-处理结果oom"}},[t._v("#")]),t._v(" OOM: PermGen和 OOM：MetaSpace（处理结果OOM）")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("要解决ooM异常或heap space的异常，一般的手段是首先通过内存映像分析工具（如Ec1ipse Memory Analyzer）对dump出来的堆转储快照进行分析，重点是确认内存中的对象是否是必要的，也就是要先分清楚到底是出现了"),a("code",[t._v("内存泄漏")]),t._v("（Memory Leak）还是"),a("code",[t._v("内存溢出")]),t._v("（Memory Overflow）")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("内存泄漏就是 有大量的引用指向某些对象，但是这些对象以后不会使用了，但是因为它们还和GC ROOT有关联，所以导致以后这些对象也不会被回收")]),t._v("，这就是内存泄漏的问题")])])]),t._v(" "),a("li",[a("p",[t._v("如果是内存泄漏，可进一步通过工具查看泄漏对象到GC Roots的引用链。于是就能找到泄漏对象是通过怎样的路径与GCRoots相关联并导致垃圾收集器无法自动回收它们的。掌握了泄漏对象的类型信息，以及GCRoots引用链的信息，就可以比较准确地定位出泄漏代码的位置。")])]),t._v(" "),a("li",[a("p",[t._v("如果不存在内存泄漏，换句话说就是内存中的对象确实都还必须存活着，那就应当检查虚拟机的堆参数（-Xmx与-Xms），与机器物理内存对比看是否还可以调大，从代码上检查是否存在某些对象生命周期过长、持有状态时间过长的情况，尝试减少程序运行期的内存消耗。")])])]),t._v(" "),a("h2",{attrs:{id:"_4-方法区的内部结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-方法区的内部结构"}},[t._v("#")]),t._v(" 4. 方法区的内部结构")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202012/12/071123-530231.png",alt:""}})]),t._v(" "),a("p",[t._v("《深入理解Java虚拟机》书中对方法区（Method Area）"),a("code",[t._v("存储内容")]),t._v("描述如下：它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202012/12/071326-762522.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"类型信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型信息"}},[t._v("#")]),t._v(" 类型信息")]),t._v(" "),a("p",[t._v("对每个加载的类型（类class、接口interface、枚举enum、注解annotation），JVm必须在方法区中存储以下类型信息：")]),t._v(" "),a("ul",[a("li",[t._v("这个类型的完整有效名称（全名=包名.类名）")]),t._v(" "),a("li",[t._v("这个类型直接父类的完整有效名（对于interface或是java.lang.object，都没有父类）")]),t._v(" "),a("li",[t._v("这个类型的修饰符（public，abstract，final的某个子集）")]),t._v(" "),a("li",[t._v("这个类型直接接口的一个有序列表")])]),t._v(" "),a("h3",{attrs:{id:"域信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#域信息"}},[t._v("#")]),t._v(" 域信息")]),t._v(" "),a("p",[t._v("JVM必须在方法区中保存类型的所有域的相关信息以及域的声明顺序。")]),t._v(" "),a("p",[t._v("域的相关信息包括：域名称、域类型、域修饰符（public，private，protected，static，final，volatile，transient的某个子集）")]),t._v(" "),a("h3",{attrs:{id:"方法-method-信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法-method-信息"}},[t._v("#")]),t._v(" 方法（Method）信息")]),t._v(" "),a("p",[t._v("JVM必须保存所有方法的以下信息，同域信息一样包括声明顺序：")]),t._v(" "),a("ul",[a("li",[t._v("方法名称")]),t._v(" "),a("li",[t._v("方法的返回类型（或void）")]),t._v(" "),a("li",[t._v("方法参数的数量和类型（按顺序）")]),t._v(" "),a("li",[t._v("方法的修饰符（public，private，protected，static，final，synchronized，native，abstract的一个子集）")]),t._v(" "),a("li",[t._v("方法的字节码（bytecodes）、操作数栈、局部变量表及大小（abstract和native方法除外）")]),t._v(" "),a("li",[t._v("异常表（abstract和native方法除外）")])]),t._v(" "),a("blockquote",[a("p",[t._v("每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引")])]),t._v(" "),a("h3",{attrs:{id:"non-final的类变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#non-final的类变量"}},[t._v("#")]),t._v(" non-final的类变量")]),t._v(" "),a("p",[t._v("静态变量和类关联在一起，随着类的加载而加载，他们成为类数据在逻辑上的一部分")]),t._v(" "),a("p",[a("code",[t._v("类变量被类的所有实例共享，即使没有类实例时，你也可以访问它")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * non-final的类变量\n *\n * @author: CHGGX\n * @create: 2020-07-08-16:54\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodAreaTest")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),t._v(" order "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("order"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Order")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" count "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br")])]),a("p",[t._v("如上代码所示，即使我们把order设置为null，也不会出现空指针异常")]),t._v(" "),a("h3",{attrs:{id:"全局常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局常量"}},[t._v("#")]),t._v(" 全局常量")]),t._v(" "),a("p",[t._v("全局常量就是使用 "),a("code",[t._v("static final")]),t._v(" 进行修饰")]),t._v(" "),a("p",[t._v("被声明为"),a("code",[t._v("final的类变量")]),t._v("的处理方法则不同，每个全局常量在"),a("code",[t._v("编译的时候就会被分配了")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"运行时常量池-vs-常量池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行时常量池-vs-常量池"}},[t._v("#")]),t._v(" 运行时常量池 VS 常量池")]),t._v(" "),a("p",[t._v("运行时常量池，就是运行时常量池")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202012/24/201532-231298.png",alt:""}})]),t._v(" "),a("ul",[a("li",[t._v("方法区，内部包含了"),a("code",[t._v("运行时常量池")])]),t._v(" "),a("li",[t._v("字节码文件，内部包含了"),a("code",[t._v("常量池")])]),t._v(" "),a("li",[t._v("要弄清楚方法区，需要理解清楚C1assFile，因为加载类的信息都在方法区。")]),t._v(" "),a("li",[t._v("要弄清楚方法区的运行时常量池，需要理解清楚classFile中的常量池。")])]),t._v(" "),a("h4",{attrs:{id:"常量池-constant-pool"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量池-constant-pool"}},[t._v("#")]),t._v(" 常量池 (Constant Pool)")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202012/24/202124-893154.png",alt:""}})]),t._v(" "),a("p",[t._v("一个有效的字节码文件中除了包含类的版本信息、字段、方法以及接口等描述符信息外，还包含一项信息就是"),a("code",[t._v("常量池表")]),t._v("（Constant Pool Table），包括各种字面量和对类型、域和方法的"),a("code",[t._v("符号引用")])]),t._v(" "),a("h5",{attrs:{id:"为什么需要常量池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要常量池"}},[t._v("#")]),t._v(" 为什么需要常量池？")]),t._v(" "),a("p",[t._v("一个java源文件中的类、接口，编译后产生一个字节码文件。而Java中的字节码需要数据支持，通常这种数据会很大以至于不能直接存到字节码里，换另一种方式，可以存到常量池，这个字节码包含了指向常量池的引用。在动态链接的时候会用到运行时常量池，之前有介绍。")]),t._v(" "),a("p",[t._v("比如：如下的代码：")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SimpleClass")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("虽然上述代码只有194字节，但是里面却使用了String、System、PrintStream及Object等结构。这里的代码量其实很少了，如果代码多的话，引用的结构将会更多，这里就需要用到"),a("code",[t._v("常量池")]),t._v("了。")]),t._v(" "),a("h6",{attrs:{id:"jclasslib查看具体类的常量池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jclasslib查看具体类的常量池"}},[t._v("#")]),t._v(" jclasslib查看具体类的常量池")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202012/24/202627-698130.png",alt:""}})]),t._v(" "),a("p",[a("code",[t._v("#1")]),t._v(": 代表使用的是 常量池里的")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202012/24/202809-415590.png",alt:""}})]),t._v(" "),a("h5",{attrs:{id:"常量池中有什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量池中有什么"}},[t._v("#")]),t._v(" 常量池中有什么")]),t._v(" "),a("ul",[a("li",[t._v("数量值")]),t._v(" "),a("li",[t._v("字符串值")]),t._v(" "),a("li",[t._v("类引用")]),t._v(" "),a("li",[t._v("字段引用")]),t._v(" "),a("li",[t._v("方法引用")])]),t._v(" "),a("h5",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("p",[t._v("常量池、可以看做是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等类型")]),t._v(" "),a("h4",{attrs:{id:"运行时常量池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行时常量池"}},[t._v("#")]),t._v(" 运行时常量池")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("运行时常量池（Runtime Constant Pool）是方法区的一部分。")])]),t._v(" "),a("li",[a("p",[t._v("常量池表（Constant Pool Table）是Class文件的一部分，"),a("code",[t._v("用于存放编译期生成的各种字面量与符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。")])])]),t._v(" "),a("li",[a("p",[t._v("运行时常量池，在加载类和接口到虚拟机后，就会创建对应的运行时常量池。")])]),t._v(" "),a("li",[a("p",[t._v("JVM为每个已加载的类型（类或接口）都维护一个常量池。池中的数据项像数组项一样，是通过索引访问的。")])]),t._v(" "),a("li",[a("p",[t._v("运行时常量池中包含多种不同的常量，包括编译期就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或者字段引用。此时不再是常量池中的符号地址了，这里换为真实地址。")]),t._v(" "),a("ul",[a("li",[t._v("运行时常量池，相对于Class文件常量池的另一重要特征是：具备"),a("code",[t._v("动态性。")]),t._v(" String.intern()")])])]),t._v(" "),a("li",[a("p",[t._v("运行时常量池类似于传统编程语言中的符号表（symboltable），但是它所包- 含的数据却比符号表要更加丰富一些。")])]),t._v(" "),a("li",[a("p",[t._v("当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则JVM会抛outofMemoryError异常。")])])]),t._v(" "),a("h2",{attrs:{id:"_5-方法区使用举例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-方法区使用举例"}},[t._v("#")]),t._v(" 5. 方法区使用举例")]),t._v(" "),a("p",[t._v("如下代码")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MethodAreaDemo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("字节码执行过程展示")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202303291116144.png",alt:""}})]),t._v(" "),a("p",[t._v("首先现将操作数500放入到操作数栈中")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202303291116307.png",alt:""}})]),t._v(" "),a("p",[t._v("然后存储到局部变量表中")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202303291116694.png",alt:""}})]),t._v(" "),a("p",[t._v("然后重复一次，把100放入局部变量表中，最后再将变量表中的500 和 100 取出，进行操作")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202303291116639.png",alt:""}})]),t._v(" "),a("p",[t._v("将500 和 100 进行一个除法运算，在把结果入栈")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202303291116833.png",alt:""}})]),t._v(" "),a("p",[t._v("在最后就是输出流，需要调用运行时常量池的常量")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202303291116105.png",alt:""}})]),t._v(" "),a("p",[t._v("最后调用invokevirtual（虚方法调用），然后返回")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202303291116560.png",alt:""}})]),t._v(" "),a("p",[t._v("返回时")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202303291116166.png",alt:""}})]),t._v(" "),a("p",[t._v("程序计数器始终计算的都是当前代码运行的位置，目的是为了方便记录 方法调用后能够正常返回，或者是进行了CPU切换后，也能回来到原来的代码进行执行。")]),t._v(" "),a("h2",{attrs:{id:"_6-方法区的演进细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-方法区的演进细节"}},[t._v("#")]),t._v(" 6. 方法区的演进细节")]),t._v(" "),a("p",[t._v("首先明确：只有"),a("code",[t._v("Hotspot才有永久代")]),t._v("。BEA JRockit、IBMJ9等来说，是不存在永久代的概念的。原则上如何实现方法区属于虚拟机实现细节，不受《Java虚拟机规范》管束，并不要求统一")]),t._v(" "),a("p",[t._v("Hotspot中方法区的变化：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("JDK1.6及以前")]),t._v(" "),a("th",[t._v("有"),a("code",[t._v("永久代")]),t._v("，静态变量存储在永久代上")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("JDK1.7")]),t._v(" "),a("td",[t._v("有"),a("code",[t._v("永久代")]),t._v("，但已经逐步 “去永久代”，字符串常量池，静态变量移除，保存在堆中")])]),t._v(" "),a("tr",[a("td",[t._v("JDK1.8")]),t._v(" "),a("td",[t._v("无永久代，类型信息，字段，方法，常量保存在本地内存的"),a("code",[t._v("元空间")]),t._v("，但"),a("code",[t._v("字符串常量池、静态变量仍然在堆中")]),t._v("。")])])])]),t._v(" "),a("h3",{attrs:{id:"jdk6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk6"}},[t._v("#")]),t._v(" JDK6]")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202012/24/210452-490490.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"jdk7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk7"}},[t._v("#")]),t._v(" JDK7")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202012/24/210541-938201.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"jdk8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jdk8"}},[t._v("#")]),t._v(" JDK8")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202012/24/210614-685206.png",alt:""}})]),t._v(" "),a("h3",{attrs:{id:"为什么永久代要被元空间替代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么永久代要被元空间替代"}},[t._v("#")]),t._v(" 为什么永久代要被元空间替代？")]),t._v(" "),a("p",[t._v("OPENJDK: http://openjdk.java.net/jeps/122")]),t._v(" "),a("p",[t._v("JRockit是和HotSpot融合后的结果，因为JRockit没有永久代，所以他们不需要配置永久代")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("随着Java8的到来，HotSpot VM中再也见不到永久代了。但是这并不意味着类的元数据信息也消失了。这些数据被移到了一个与堆不相连的本地内存区域，这个区域叫做元空间（Metaspace）。")])]),t._v(" "),a("li",[a("p",[t._v("由于类的元数据分配在本地内存中，元空间的最大可分配空间就是系统可用内存空间.")])]),t._v(" "),a("li",[a("p",[t._v("这项"),a("code",[t._v("改动是很有必要的，原因")]),t._v("有：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("为永久代设置空间大小是很难确定的。")])])]),t._v(" "),a("p",[t._v("在某些场景下，如果动态加载类过多，容易产生Perm区的oom。比如某个实际Web工 程中，因为功能点比较多，在运行过程中，要不断动态加载很多类，经常出现致命错误。")]),t._v(" "),a("p",[t._v("“Exception in thread‘dubbo client x.x connector'java.lang.OutOfMemoryError:PermGen space”")]),t._v(" "),a("p",[t._v("而元空间和永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。 因此，默认情况下，元空间的大小仅受本地内存限制。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("对永久代进行调优是很困难的。")]),t._v(" "),a("ul",[a("li",[t._v("主要是为了降低Full GC")])])])])])]),t._v(" "),a("p",[t._v("有些人认为方法区（如HotSpot虚拟机中的元空间或者永久代）是没有垃圾收集行为的，其实不然。《Java虚拟机规范》对方法区的约束是非常宽松的，提到过可以不要求虚拟机在方法区中实现垃圾收集。事实上也确实有未实现或未能完整实现方法区类型卸载的收集器存在（如JDK11时期的ZGC收集器就不支持类卸载）。 一般来说这个区域的回收效果比较难令人满意，尤其是类型的卸载，条件相当苛刻。但是这部分区域的回收有时又确实是必要的。以前sun公司的Bug列表中，曾出现过的若干个严重的Bug就是由于低版本的HotSpot虚拟机对此区域未完全回收而导致内存泄漏")]),t._v(" "),a("p",[t._v("方法区的垃圾收集主要回收两部分内容：常量池中废弃的常量和不在使用的类型")]),t._v(" "),a("h3",{attrs:{id:"stringtable为什么要调整位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stringtable为什么要调整位置"}},[t._v("#")]),t._v(" "),a("code",[t._v("StringTable")]),t._v("为什么要调整位置")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("jdk7中将StringTable放到了堆空间中。因为"),a("code",[t._v("永久代的回收效率很低")]),t._v("，在full gc的时候才会触发。而full gc是老年代的空间不足、永久代不足时才会触发。")])]),t._v(" "),a("li",[a("p",[t._v("这就导致stringTable回收效率不高。而我们开发中会有大量的字符串被创建，回收效率低，导致永久代内存不足。"),a("code",[t._v("放到堆里，能及时回收内存。")])])])]),t._v(" "),a("h3",{attrs:{id:"静态变量存放在那里"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态变量存放在那里"}},[t._v("#")]),t._v(" 静态变量存放在那里？")]),t._v(" "),a("p",[t._v("静态引用对应的对象实体始终都存在"),a("code",[t._v("堆空间")])]),t._v(" "),a("p",[t._v("可以使用 "),a("code",[t._v("jhsdb.ext")]),t._v("，需要在"),a("code",[t._v("jdk9")]),t._v("的时候才引入的")]),t._v(" "),a("p",[t._v("staticobj随着Test的类型信息存放在方法区，instanceobj随着Test的对象实例存放在Java堆，localobject则是存放在foo（）方法栈帧的局部变量表中。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202303291117042.png",alt:""}})]),t._v(" "),a("p",[t._v("测试发现：三个对象的数据在内存中的地址都落在Eden区范围内，所以结论："),a("code",[t._v("只要是对象实例必然会在Java堆中分配")]),t._v("。")]),t._v(" "),a("p",[t._v("接着，找到了一个引用该staticobj对象的地方，是在一个java.1ang.Class的实例里，并且给出了这个实例的地址，通过Inspector查看该对象实例，可以清楚看到这确实是一个java.lang.Class类型的对象实例，里面有一个名为staticobj的实例字段：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202303291117395.png",alt:""}})]),t._v(" "),a("p",[t._v("从《Java虚拟机规范》所定义的概念模型来看，所有Class相关的信息都应该存放在方法区之中，但方法区该如何实现，《Java虚拟机规范》并未做出规定，这就成了一件允许不同虚拟机自己灵活把握的事情。JDK7及其以后版本的HotSpot虚拟机选择把静态变量与类型在Java语言一端的映射class对象存放在一起，存储于Java堆之中，从我们的实验中也明确验证了这一点")]),t._v(" "),a("h2",{attrs:{id:"_7-方法区的垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-方法区的垃圾回收"}},[t._v("#")]),t._v(" 7. 方法区的垃圾回收")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("有些人认为方法区（如Hotspot虚拟机中的元空间或者永久代）是没有垃圾收集行为的，其实不然。《Java虚拟机规范》对方法区的约束是非常宽松的，提到过可以不要求虚拟机在方法区中实现垃圾收集。事实上也确实有未实现或未能完整实现方法区类型卸载的收集器存在（如JDK11时期的"),a("code",[t._v("zGC收集器就不支持类卸载")]),t._v("）。")])]),t._v(" "),a("li",[a("p",[t._v("一般来说"),a("code",[t._v("这个区域的回收效果比较难令人满意，尤其是类型的卸载，条件相当苛刻")]),t._v("。但是这部分区域的回收"),a("code",[t._v("有时又确实是必要的")]),t._v("。以前sun公司的Bug列表中，曾出现过的若干个严重的Bug就是由于低版本的HotSpot虚拟机对此区域未完全回收而导致内存泄漏。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("方法区的垃圾收集主要回收两部分内容：常量池中废弃的常量和不再使用的类型。")])])]),t._v(" "),a("li",[a("p",[t._v("先来说说方法区内常量池之中主要存放的两大类常量：字面量和符号引用。字面量比较接近Java语言层次的常量概念，如文本字符串、被声明为final的常量值等。而符号引用则属于编译原理方面的概念，包括下面三类常量：")]),t._v(" "),a("ul",[a("li",[t._v("类和接口的全限定名")]),t._v(" "),a("li",[t._v("字段的名称和描述符")]),t._v(" "),a("li",[t._v("方法的名称和描述符")])])]),t._v(" "),a("li",[a("p",[t._v("HotSpot虚拟机对常量池的回收策略是很明确的，只要常量池中的常量没有被任何地方引用，就可以被回收。")])]),t._v(" "),a("li",[a("p",[t._v("回收废弃常量与回收Java堆中的对象非常类似。（关于常量的回收比较简单，重点是类的回收）")])]),t._v(" "),a("li",[a("p",[t._v("判定一个常量是否“废弃”还是相对简单，而要判定一个类型是否属于“不再被使用的类”的条件就比较苛刻了。需要同时满足下面三个条件：")]),t._v(" "),a("ul",[a("li",[t._v("该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例。")]),t._v(" "),a("li",[t._v("加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如osGi、JSP的重加载等，否则通常是很难达成的。")]),t._v(" "),a("li",[t._v("该类对应的java.lang.C1ass对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。")])])]),t._v(" "),a("li",[a("p",[t._v("Java虚拟机被允许对满足上述三个条件的无用类进行回收，这里说的仅仅是“被允许”，而并不是和对象一样，没有引用了就必然会回收。关于是否要对类型进行回收，HotSpot虚拟机提供了-Xnoclassgc参数进行控制，还可以使用-verbose:class 以及 -XX：+TraceClass-Loading、-XX：+TraceClassUnLoading查看类加载和卸载信息")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("在大量使用反射、动态代理、CGLib等字节码框架，动态生成JSP以及oSGi这类频繁自定义类加载器的场景中，通常都需要Java虚拟机具备类型卸载的能力，以保证不会对方法区造成过大的内存压力。")])])])]),t._v(" "),a("h2",{attrs:{id:"_8-总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-总结"}},[t._v("#")]),t._v(" 8. 总结")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://chggx-typora.oss-cn-beijing.aliyuncs.com/typora/202012/27/110820-815271.png",alt:""}})])])}),[],!1,null,null,null);a.default=r.exports}}]);